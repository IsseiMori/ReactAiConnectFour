{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","GameState","initializeBoard","board","row","board_row","col","push","None","dropCoin","player","length","gameCompleted","r","c","boardSlice","winningResult","checkWinningSlice","full","Draw","Ongoing","miniBoard","some","cell","tryDropCoin","tryRemoveCoin","alphaBetaRoot","depth","maxDepth","a","b","maxV","Number","NEGATIVE_INFINITY","maxC","invalid","p","newBoard","i","slice","alphaBetaMin","v","console","log","alphaBetaMax","evaluationFunction","completeStatus","Math","pow","minV","POSITIVE_INFINITY","threes","countThrees","threes_o","countTwos","count","isConsecutive","App","state","playerTurn","gameState","handleOnClick","makeMove","renderCells","map","rowInd","renderRow","colInd","renderCell","className","key","onClick","data-player","toString","reset","setState","showStatus","this","opponent","then","response","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5e60ac6.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\n\nenum Player {\n  None = 0,\n  One = 1,\n  Two = 2\n}\n\nenum GameState {\n  Ongoing = -1,\n  Draw = 0,\n  PlayerOneWin = 1,\n  PlayerTwoWin = 2\n}\n\ntype Board = Player[][];\n\ninterface State {\n  board: Board,\n  playerTurn: number,\n  gameState: GameState | Player\n}\n\nconst initializeBoard = () => {\n  const board = [];\n  \n  for (let row = 0; row < 6; row++) {\n    const board_row = []\n    for (let col = 0; col < 7; col++) {\n      board_row.push(Player.None)\n    }\n    board.push(board_row)\n  }\n\n  return board\n\n}\n\n/* Drop a coin in the column */\nconst dropCoin = (board: Board, col: number, player: Player) => {\n  if (board[0][col] !== 0) return false\n\n  for (let row = 1; row < board.length; row++) {\n    if (board[row][col] !== 0) {\n      board[row-1][col] = player\n      return true\n    }\n  }\n\n  board[board.length-1][col] = player\n  return true\n}\n\n/* \n  1 if user 1 wins\n  2 if user 2 wins\n  0 if draw\n  -1 if ongoing\n*/\nconst gameCompleted = (board: Board) => {\n\n  // Checks wins horizontally\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c <= board[0].length - 4; c++) {\n\n      const boardSlice = [\n        board[r][c],\n        board[r][c+1],\n        board[r][c+2],\n        board[r][c+3]\n      ];\n\n      const winningResult = checkWinningSlice(boardSlice);\n      if (winningResult !== false) return winningResult;\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= board.length - 4; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      \n      const boardSlice = [\n        board[r][c],\n        board[r+1][c],\n        board[r+2][c],\n        board[r+3][c]\n      ];\n\n      const winningResult = checkWinningSlice(boardSlice);\n      if (winningResult !== false) return winningResult;\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= 2; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n\n      // Checks diagonal down-left\n      if (c >= 3) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c-1],\n          board[r+2][c-2],\n          board[r+3][c-3]\n        ];\n  \n        const winningResult = checkWinningSlice(boardSlice);\n        if (winningResult !== false) return winningResult;\n      } \n\n      // Checks diagonal down-right\n      if (c <= 3) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c+1],\n          board[r+2][c+2],\n          board[r+3][c+3]\n        ];\n  \n        const winningResult = checkWinningSlice(boardSlice);\n        if (winningResult !== false) return winningResult;\n      }\n    }\n  }\n\n  let full = true\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      if (board[r][c] === 0) full = false\n    }\n  }\n\n  if (full) return GameState.Draw\n  else return GameState.Ongoing\n}\n\n/* \n  1 if 1111 \n  2 if 2222\n  false if other\n*/\nconst checkWinningSlice = (miniBoard: Player[]) => {\n  if (miniBoard.some(cell => cell === Player.None)) return false;\n\n  if (\n    miniBoard[0] === miniBoard[1] &&\n    miniBoard[1] === miniBoard[2] &&\n    miniBoard[2] === miniBoard[3]\n  ) {\n    return miniBoard[1];\n  }\n\n  return false;\n};\n\n\n/* -------------------- AI FUNCTIONS STARTS ------------------ */\n\n// -1 if fails\n// 0 if success\nconst tryDropCoin = (board: Board, col: number, player: Player) => {\n  if (board[0][col] !== 0) return -1\n\n  for (let row = 1; row < board.length; row++) {\n    if (board[row][col] !== 0) {\n      board[row-1][col] = player\n      return 0\n    }\n  }\n\n  board[board.length-1][col] = player\n  return 0\n}\n\n// -1 if fails\n// 0 if success\nconst tryRemoveCoin = (board: Board, col: number) => {\n\n  for (let row = 0; row < board.length; row++) {\n    if (board[row][col] !== 0) {\n      board[row][col] = 0\n      return 0\n    }\n  }\n\n  return -1\n}\n\n\nconst alphaBetaRoot = async (board: Board, player: Player, depth: number, maxDepth: number, a: number, b: number) => {\n\n    let maxV = Number.NEGATIVE_INFINITY;\n    let maxC = 0\n    let invalid = 1\n\n    let p = [0,0,0,0,0,0,0]\n\n    for (let col = 0; col < board[0].length; col++) {\n      var newBoard = [];\n      for (var i = 0; i < board.length; i++)\n      newBoard[i] = board[i].slice();\n\n      if (tryDropCoin(newBoard, col, 2) !== 0) continue\n\n      let v = await alphaBetaMin(newBoard, player, depth+1, maxDepth, a, b)\n      p[col] = v\n\n      if (v > maxV || invalid === 1) {\n        invalid = 0\n        maxV = v\n        maxC = col\n      }\n      if (v >= b) return maxV\n      if (a < v) a = v\n      if (tryRemoveCoin(newBoard, col) === -1) console.log(\"ERRORR\")\n    }\n\n    console.log(p)\n\n    return maxC\n}\n\nconst alphaBetaMax = async (board: Board, player: Player, depth: number, maxDepth: number, a: number, b: number) => {\n  \n  // Termianl State\n  if (depth > maxDepth) {\n    const v = evaluationFunction(board, player)\n    return v\n  } \n\n  // Complete check\n  const completeStatus = gameCompleted(board)\n  if(completeStatus === 1) return - 100.0 / Math.pow(depth,2)\n  if(completeStatus === 2) return 100.0 / Math.pow(depth,2)\n  \n  let maxV = Number.NEGATIVE_INFINITY;\n  let invalid = 1\n\n  for (let col = 0; col < board[0].length; col++) {\n    if (tryDropCoin(board, col, 2) !== 0) continue\n\n    let v = await alphaBetaMin(board, player, depth+1, maxDepth, a, b)\n\n    if (v > maxV || invalid === 1) {\n      invalid = 0\n      maxV = v\n    }\n    if (v >= b) return maxV\n    if (a < v) a = v\n    tryRemoveCoin(board, col)\n  }\n\n  return maxV\n}\n\nconst alphaBetaMin = async (board: Board, player: Player, depth: number, maxDepth: number, a: number, b: number) => {\n\n  // Termianl State\n  if (depth > maxDepth) {\n    const v = evaluationFunction(board, player)\n    return v\n  } \n\n  // Complete check\n  const completeStatus = gameCompleted(board)\n  if(completeStatus === 1) return - 100.0 / Math.pow(depth,2)\n  if(completeStatus === 2) return 100.0 / Math.pow(depth,2)\n  \n  let minV = Number.POSITIVE_INFINITY;\n  let invalid = 1\n\n  for (let col = 0; col < board[0].length; col++) {\n    var newBoard = [];\n      for (var i = 0; i < board.length; i++)\n      newBoard[i] = board[i].slice();\n\n    if (tryDropCoin(newBoard, col, 1) !== 0) continue\n\n    let v = await alphaBetaMax(newBoard, player, depth+1, maxDepth, a, b)\n\n    if (v < minV || invalid === 1) {\n      invalid = 0\n      minV = v\n    }\n    if (v <= a) return minV\n    if (v < b) b = v\n    tryRemoveCoin(newBoard, col)\n  }\n\n  return minV\n}\n\n/* Evaluation value of the current board for player */\nconst evaluationFunction = (board: Board, player: Player) => {\n\n  const threes = countThrees(board, 2)\n  const threes_o = countThrees(board, 1)\n  const twos = countTwos(board, 2)\n  const twos_o = countTwos(board, 1)\n\n  return (3 * threes + twos) - (3 * threes_o + twos_o) \n}\n\n/* Count the number of three consecutive player color */\nconst countThrees = (board: Board, player: Player) => {\n\n  let count = 0\n\n  // Checks wins horizontally\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c <= board[0].length - 3; c++) {\n\n      const boardSlice = [\n        board[r][c],\n        board[r][c+1],\n        board[r][c+2]\n      ];\n\n\n      if (board[r][c] === player) {\n        if (isConsecutive(boardSlice)) count++\n      }\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= board.length - 3; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      \n      const boardSlice = [\n        board[r][c],\n        board[r+1][c],\n        board[r+2][c]\n      ];\n\n      if (board[r][c] === player) {\n        if (isConsecutive(boardSlice)) count++\n      }\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= 3; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n\n      // Checks diagonal down-left\n      if (c >= 2) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c-1],\n          board[r+2][c-2]\n        ];\n  \n        if (board[r][c] === player) {\n          if (isConsecutive(boardSlice)) count++\n        }\n      } \n\n      // Checks diagonal down-right\n      if (c <= 4) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c+1],\n          board[r+2][c+2]\n        ];\n  \n        if (board[r][c] === player) {\n          if (isConsecutive(boardSlice)) count++\n        }\n      }\n    }\n  }\n\n  return count\n}\n\n/* Count the number of two consecutive player color */\nconst countTwos = (board: Board, player: Player) => {\n\n  let count = 0\n\n  // Checks wins horizontally\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c <= board[0].length - 2; c++) {\n\n      const boardSlice = [\n        board[r][c],\n        board[r][c+1]\n      ];\n\n      if (board[r][c] === player) {\n        if (isConsecutive(boardSlice)) count++\n      }\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= board.length - 2; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n      \n      const boardSlice = [\n        board[r][c],\n        board[r+1][c]\n      ];\n\n      if (board[r][c] === player) {\n        if (isConsecutive(boardSlice)) count++\n      }\n    }\n  }\n\n  // check wins vertically\n  for (let r = 0; r <= 4; r++) {\n    for (let c = 0; c < board[0].length; c++) {\n\n      // Checks diagonal down-left\n      if (c >= 2) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c-1]\n        ];\n  \n        if (board[r][c] === player) {\n          if (isConsecutive(boardSlice)) count++\n        }\n      } \n\n      // Checks diagonal down-right\n      if (c <= 5) {\n        const boardSlice = [\n          board[r][c],\n          board[r+1][c+1]\n        ];\n  \n        if (board[r][c] === player) {\n          if (isConsecutive(boardSlice)) count++\n        }\n      }\n    }\n  }\n\n  return count\n}\n\n/* Return true if the  */\nconst isConsecutive = (miniBoard: Player[]) => {\n  if (miniBoard.some(cell => cell === Player.None)) return false;\n\n  if (miniBoard.length === 2) {\n    if (\n      miniBoard[0] === miniBoard[1] &&\n      miniBoard[1] === miniBoard[0]\n    ) {\n      return true\n    }\n  }\n\n  if (miniBoard.length === 3) {\n    if (\n      miniBoard[0] === miniBoard[1] &&\n      miniBoard[1] === miniBoard[2] &&\n      miniBoard[2] === miniBoard[3]\n    ) {\n      return true\n    }\n  }\n\n  return false;\n};\n\n/* -------------------- AI FUNCTIONS ENDS -------------------- */\n\nclass App extends React.Component<{}, State> {\n\n  state: State = {\n    board: initializeBoard(),\n    playerTurn: 1,\n    gameState: GameState.Ongoing\n  }\n\n  /* onClick handler */\n  public handleOnClick = (col: number) => () => {\n    \n    // Don't make a move if not ongoing state\n    const {gameState} = this.state\n    if (gameState !== GameState.Ongoing) return \n\n    this.makeMove(col)\n  }\n\n  /* Place a coin and change turn */\n  public makeMove(col: number) {\n    const {board, playerTurn} = this.state\n\n    const opponent = playerTurn === 1? 2:1\n    const newBoard = board.slice()\n\n    // drop a coin for user and update\n    if (dropCoin(newBoard, col, playerTurn) === false) return\n    let gameState = gameCompleted(newBoard);\n    this.setState({\n      board: newBoard,\n      gameState\n    });\n    if (gameState !== GameState.Ongoing) return\n\n    // drop a coin for ai and update\n    // const bestMove = alphaBetaRoot(board, playerTurn, 0, 1, Number.NEGATIVE_INFINITY,  Number.POSITIVE_INFINITY)\n    alphaBetaRoot(board, playerTurn, 0, 4, Number.NEGATIVE_INFINITY,  Number.POSITIVE_INFINITY).then((response) => {\n      dropCoin(newBoard, response, opponent)\n      gameState = gameCompleted(newBoard);\n      this.setState({\n        board: newBoard,\n        gameState\n      });\n    });\n  }\n\n  /* UI Starts here */\n  public renderCells = () => {\n    const {board} = this.state\n\n    return board.map((row, rowInd) => this.renderRow(row, rowInd))\n  }\n\n  public renderRow = (row: Player[], rowInd: number) => {\n    return row.map((player, colInd) => this.renderCell(player, rowInd, colInd))\n  }\n\n  public renderCell = (player: Player, row: number, col: number) => {\n    return <div className=\"cell\" key = {row*7+col} onClick = {this.handleOnClick(col)} data-player={player.toString()}></div>\n  }\n  /* UI Ends here */\n\n  // Onclick reset board function\n  public reset = () => {\n    this.setState({\n      board: initializeBoard()\n    })\n  }\n\n  public showStatus = () => {\n    const {gameState} = this.state\n    switch (gameState) {\n      case (-1):\n        return \n      case (0):\n        return \"DRAW\"\n      case (1):\n        return \"YOU WON\"\n      case (2):\n        return \"YOU LOST\"\n    }\n    return {gameState}\n  }\n\n  render () {\n    this.renderCells()\n    return(\n      <div className=\"App\">\n        <div className=\"title\">CONNECT 4</div>\n        <div className=\"status\">{this.showStatus()}</div>\n        <button className =\"button\" onClick={() => { this.reset() }}>Reset</button>\n        <div className=\"board\">\n          {this.renderCells()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}